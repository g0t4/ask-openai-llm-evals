{
  "raw": true,
  "stream": true,
  "options": {
    "num_ctx": 8192
  },
  "prompt": "<|repo_name|>ask-openai.nvim\n<|file_sep|>tags\nrequire('ask-openai.questions.ask')\n    function M.handle_messages_updated()\n    function M.send_messages()\n    function M.send_tool_messages_if_all_tools_done()\nrequire('ask-openai.rewrites.inline')\n    function M.handle_messages_updated()\nrequire('ask-openai.tools.tests.sse')\n    function f.handle_messages_updated()\nrequire('devtools.messages')\n    function M.append(...)\n    callback = function()\n    function M.clear()\n    function M.create_new_buffer()\n    function M.divider(...)\n    function M.ensure_open()\n    function M.execute_in_dump_window(command)\n    function format_dump(value)\n    function M.get_ids()\n    function M.header(...)\n    function M.is_visible(bufnr)\n    function M.open_append(...)\n    function M.scroll_back_before_last_append()\n    function M.setup()<|file_sep|>.ask.context\n<|file_sep|>lua/ask-openai/prediction/context/matching_ctags.tests.lua\n<|fim_prefix|>require('ask-openai.helpers.testing')\nlocal ctags = require(\"ask-openai.prediction.context.ctags\")\nlocal matching_ctags = require(\"ask-openai.prediction.context.matching_ctags\")\nlocal should = require(\"devtools.tests.should\")\nlocal messages<|fim_suffix|>\n\ndescribe(\"matching_ctags\", function()\n    it(\"requires\", function()\n        local maps_to = matching_ctags._require_for_file_path(\"lua/foo/bar.lua\")\n        should.be_equal(maps_to, \"require('foo.bar')\")\n    end)\n\n    it(\"get_context_item()\", function()\n        local item = matching_ctags.get_context_item_for(\"get_context_items\")\n        vim.print(item.content)\n\n        local hardcoded = [[\nlua/ask-openai/prediction/context/git_diff.lua\n    function M.get_context_items()\nlua/ask-openai/prediction/context/yanks.lua\n    function M.get_context_item()\nlua/ask-openai/prediction/context/matching_ctags.lua\n    function M.get_context_item()\n    function M.get_context_item_for(word)\nlua/ask-openai/prediction/context/project.lua\n    function M.get_context_items()\n]]\n\n        -- COOL!... now hopefully this helps suggest to use the requires!\n        local hard_git_diff_with_require = [[\nrequire('ask-openai.prediction.context.git_diff')\n    function M.get_context_items()]]\n        -- FYI end of [[]] needs to not have extra newlines / chars\n        assert.is.not_nil(string.find(item.content, hard_git_diff_with_require, 1, true))\n\n        local hard_git_diff = [[\nlua/ask-openai/prediction/context/git_diff.lua\n    function M.get_context_items()]]\n        -- assert.is.not_nil(string.find(item.content, hard_git_diff, 1, true))\n    end)\n\n    -- FYI ALTERNATIVES for REQUIRES:\n    -- separtely distill all requires into a list (not filtered)\n    it(\"matches on file_name too\", function()\n        local item = matching_ctags.get_context_item_for(\"messages\")\n        vim.print(item.content)\n\n        local hard_git_diff_with_require = [[\nrequire('devtools.messages')]]\n        -- FYI end of [[]] needs to not have extra newlines / chars\n\n        assert.is.not_nil(string.find(item.content, hard_git_diff_with_require, 1, true))\n    end)\nend)<|fim_middle|>",
  "num_predict": 200,
  "model": "qwen2.5-coder:7b-base-q8_0"
}
